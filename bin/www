#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatroomapp:server');
var http = require('http');
var mongo = require('mongodb').MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

server.listen(app.get('port'), function () {
    console.log('Express server listening on port ' + app.get('port'));
});
// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var uristring="mongodb://shashikiran_sk:<PASSWORD>@cluster0-shard-00-00-6gsou.mongodb.net:27017,cluster0-shard-00-01-6gsou.mongodb.net:27017,cluster0-shard-00-02-6gsou.mongodb.net:27017/chatroomApp?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin";
io.on('connection', function (socket) {
  console.log('a user connected');
  mongo.connect(uristring, function (err, database) {
    if(err){
      console.log(err);
    }
    else{
      console.log('Database connected');
      var db=database.db('chatroomApp');
      var collections=db.collection('chats');
      var stream=collections.find().sort({ _id : -1 }).limit(10).stream();
      stream.on('data', function (chat) { socket.emit('chat message', chat.msg); });
    }
    
  });
  // socket.broadcast.emit('chat message','hi');
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
    mongo.connect(uristring, function (err, database) {
      if(err){
        console.log(err);
      }
      else{
        console.log('Database connected');
        var db=database.db('chatroomApp');
        var collections=db.collection('chats');
        collections.insert({ 'msg': msg }, function (err, o) {
          if (err) { console.warn(err.message); }
          else { console.log("chat message inserted into db: " + msg); }
        });
        database.close();
        console.log('Database Disconnected');
        socket.broadcast.emit('chat message',msg);
        // io.emit('chat message',msg);
      }
    });
  });
  socket.on('disconnect', function () {
    console.log('user disconnected');
  });

  // socket.on('chat message', function (msg) {
  //   socket.broadcast.emit('chat', msg);
  // });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
